// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: orb.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrbManagerService_SendHeartbeat_FullMethodName     = "/orb.v1.OrbManagerService/SendHeartbeat"
	OrbManagerService_GetLatestLocation_FullMethodName = "/orb.v1.OrbManagerService/GetLatestLocation"
)

// OrbManagerServiceClient is the client API for OrbManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrbManagerServiceClient interface {
	// SendHeartbeat accepts a heartbeat message from an Orb device
	SendHeartbeat(ctx context.Context, in *SendHeartbeatRequest, opts ...grpc.CallOption) (*SendHeartbeatResponse, error)
	// GetLatestLocation returns the most recent location for a specified device
	GetLatestLocation(ctx context.Context, in *GetLatestLocationRequest, opts ...grpc.CallOption) (*GetLatestLocationResponse, error)
}

type orbManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrbManagerServiceClient(cc grpc.ClientConnInterface) OrbManagerServiceClient {
	return &orbManagerServiceClient{cc}
}

func (c *orbManagerServiceClient) SendHeartbeat(ctx context.Context, in *SendHeartbeatRequest, opts ...grpc.CallOption) (*SendHeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendHeartbeatResponse)
	err := c.cc.Invoke(ctx, OrbManagerService_SendHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orbManagerServiceClient) GetLatestLocation(ctx context.Context, in *GetLatestLocationRequest, opts ...grpc.CallOption) (*GetLatestLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestLocationResponse)
	err := c.cc.Invoke(ctx, OrbManagerService_GetLatestLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrbManagerServiceServer is the server API for OrbManagerService service.
// All implementations must embed UnimplementedOrbManagerServiceServer
// for forward compatibility.
type OrbManagerServiceServer interface {
	// SendHeartbeat accepts a heartbeat message from an Orb device
	SendHeartbeat(context.Context, *SendHeartbeatRequest) (*SendHeartbeatResponse, error)
	// GetLatestLocation returns the most recent location for a specified device
	GetLatestLocation(context.Context, *GetLatestLocationRequest) (*GetLatestLocationResponse, error)
	mustEmbedUnimplementedOrbManagerServiceServer()
}

// UnimplementedOrbManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrbManagerServiceServer struct{}

func (UnimplementedOrbManagerServiceServer) SendHeartbeat(context.Context, *SendHeartbeatRequest) (*SendHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}
func (UnimplementedOrbManagerServiceServer) GetLatestLocation(context.Context, *GetLatestLocationRequest) (*GetLatestLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestLocation not implemented")
}
func (UnimplementedOrbManagerServiceServer) mustEmbedUnimplementedOrbManagerServiceServer() {}
func (UnimplementedOrbManagerServiceServer) testEmbeddedByValue()                           {}

// UnsafeOrbManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrbManagerServiceServer will
// result in compilation errors.
type UnsafeOrbManagerServiceServer interface {
	mustEmbedUnimplementedOrbManagerServiceServer()
}

func RegisterOrbManagerServiceServer(s grpc.ServiceRegistrar, srv OrbManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrbManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrbManagerService_ServiceDesc, srv)
}

func _OrbManagerService_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrbManagerServiceServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrbManagerService_SendHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrbManagerServiceServer).SendHeartbeat(ctx, req.(*SendHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrbManagerService_GetLatestLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrbManagerServiceServer).GetLatestLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrbManagerService_GetLatestLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrbManagerServiceServer).GetLatestLocation(ctx, req.(*GetLatestLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrbManagerService_ServiceDesc is the grpc.ServiceDesc for OrbManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrbManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orb.v1.OrbManagerService",
	HandlerType: (*OrbManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHeartbeat",
			Handler:    _OrbManagerService_SendHeartbeat_Handler,
		},
		{
			MethodName: "GetLatestLocation",
			Handler:    _OrbManagerService_GetLatestLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orb.proto",
}
